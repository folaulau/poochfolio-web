name: Build and deploy code to dev S3/Cloudfront

on:
  push:
    branches:
      - development

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      build-folder: ${{ steps.build-folder.outputs.dist-build }}
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 16
        uses: actions/setup-node@v1
        with:
          node-version: 16.x
      - name: Setting version
        run: echo $GITHUB_SHA > version.txt
      - name: Install dependencies
        run: npm install
        
      # build:dev uses .env.development
      - name: Build app
        run: npm run build:dev
      - name: Copy version to application and add build to GH outputs
        id: build-folder
        run: |
          cp version.txt build/version.txt
          cd build
          ls
          echo "::set-output name=dist-build::build"
      - uses: actions/upload-artifact@v2
        with:
          name: build-folder
          path: build

  push-to-DEV:
    runs-on: ubuntu-latest
    needs: build
    environment: dev-env
    if: github.ref == 'refs/heads/development'

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: build-folder
          path: build
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - name: Sync app
        run: aws s3 sync build s3://dev.poochfolio.com --delete
      - name: Copy app
        run: aws s3 cp s3://dev.poochfolio.com/index.html s3://dev.poochfolio.com/index.html --content-type 'text/html' --cache-control 'no-store, max-age=0' --metadata-directive REPLACE
      - name: Clear cloudfront cache
        run: aws cloudfront create-invalidation --distribution-id=${{ secrets.DEV_CLOUDFRONT_DIST_ID }} --paths '/index.html' '/version.txt'


      # - name: Build count
      #   if: success()
      #   uses: masci/datadog@v1
      #   with:
      #     api-key: ${{ secrets.DATADOG_API_KEY }}
      #     metrics: |
      #       - type: "count"
      #         name: ${{ github.job }}
      #         value: 1.0
      #         host: ${{ github.event.repository.name }}
      #         tags:
      #           - "workflow:${{ github.workflow }}"
      #           - "commit:${{ github.sha }}"
      # - name: Slack Notification
      #   if: always()
      #   uses: ravsamhq/notify-slack-action@v1
      #   with:
      #     status: ${{ job.status }}
      #     token: ${{ secrets.GH_TOKEN }}
      #     notification_title: 'Build for {repo} has {status_message} in {branch}'
      #     message_format: '{emoji} *{workflow}* {status_message} in this commit: {commit_url}'
      #     footer: '<{run_url}|View Pipeline>'
      #     notify_when: 'failure'
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_BUILD_WEBHOOK }}
